{"ast":null,"code":"/**\n * Create a new training\n *\n * @param {string} model_owner - Required. The username of the user or organization who owns the model\n * @param {string} model_name - Required. The name of the model\n * @param {string} version_id - Required. The version ID\n * @param {object} options\n * @param {string} options.destination - Required. The destination for the trained version in the form \"{username}/{model_name}\"\n * @param {object} options.input - Required. An object with the model inputs\n * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the training updates\n * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n * @returns {Promise<object>} Resolves with the data for the created training\n */\nasync function createTraining(model_owner, model_name, version_id, options) {\n  const {\n    ...data\n  } = options;\n  if (data.webhook) {\n    try {\n      // eslint-disable-next-line no-new\n      new URL(data.webhook);\n    } catch (err) {\n      throw new Error('Invalid webhook URL');\n    }\n  }\n  const training = this.request(`/models/${model_owner}/${model_name}/versions/${version_id}/trainings`, {\n    method: 'POST',\n    data\n  });\n  return training;\n}\n\n/**\n * Fetch a training by ID\n *\n * @param {string} training_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */\nasync function getTraining(training_id) {\n  return this.request(`/trainings/${training_id}`, {\n    method: 'GET'\n  });\n}\n\n/**\n * Cancel a training by ID\n *\n * @param {string} training_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */\nasync function cancelTraining(training_id) {\n  return this.request(`/trainings/${training_id}/cancel`, {\n    method: 'POST'\n  });\n}\n\n/**\n * List all trainings\n *\n * @returns {Promise<object>} - Resolves with a page of trainings\n */\nasync function listTrainings() {\n  return this.request('/trainings', {\n    method: 'GET'\n  });\n}\nmodule.exports = {\n  create: createTraining,\n  get: getTraining,\n  cancel: cancelTraining,\n  list: listTrainings\n};","map":{"version":3,"names":["createTraining","model_owner","model_name","version_id","options","data","webhook","URL","err","Error","training","request","method","getTraining","training_id","cancelTraining","listTrainings","module","exports","create","get","cancel","list"],"sources":["C:/Users/priya/Desktop/try/chatvision-web/node_modules/replicate/lib/trainings.js"],"sourcesContent":["/**\n * Create a new training\n *\n * @param {string} model_owner - Required. The username of the user or organization who owns the model\n * @param {string} model_name - Required. The name of the model\n * @param {string} version_id - Required. The version ID\n * @param {object} options\n * @param {string} options.destination - Required. The destination for the trained version in the form \"{username}/{model_name}\"\n * @param {object} options.input - Required. An object with the model inputs\n * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the training updates\n * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n * @returns {Promise<object>} Resolves with the data for the created training\n */\nasync function createTraining(model_owner, model_name, version_id, options) {\n  const { ...data } = options;\n\n  if (data.webhook) {\n    try {\n      // eslint-disable-next-line no-new\n      new URL(data.webhook);\n    } catch (err) {\n      throw new Error('Invalid webhook URL');\n    }\n  }\n\n  const training = this.request(`/models/${model_owner}/${model_name}/versions/${version_id}/trainings`, {\n    method: 'POST',\n    data,\n  });\n\n  return training;\n}\n\n/**\n * Fetch a training by ID\n *\n * @param {string} training_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */\nasync function getTraining(training_id) {\n  return this.request(`/trainings/${training_id}`, {\n    method: 'GET',\n  });\n}\n\n/**\n * Cancel a training by ID\n *\n * @param {string} training_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */\nasync function cancelTraining(training_id) {\n  return this.request(`/trainings/${training_id}/cancel`, {\n    method: 'POST',\n  });\n}\n\n/**\n * List all trainings\n *\n * @returns {Promise<object>} - Resolves with a page of trainings\n */\nasync function listTrainings() {\n  return this.request('/trainings', {\n    method: 'GET',\n  });\n}\n\nmodule.exports = {\n  create: createTraining,\n  get: getTraining,\n  cancel: cancelTraining,\n  list: listTrainings,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,cAAcA,CAACC,WAAW,EAAEC,UAAU,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAC1E,MAAM;IAAE,GAAGC;EAAK,CAAC,GAAGD,OAAO;EAE3B,IAAIC,IAAI,CAACC,OAAO,EAAE;IAChB,IAAI;MACF;MACA,IAAIC,GAAG,CAACF,IAAI,CAACC,OAAO,CAAC;IACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF;EAEA,MAAMC,QAAQ,GAAG,IAAI,CAACC,OAAO,CAAE,WAAUV,WAAY,IAAGC,UAAW,aAAYC,UAAW,YAAW,EAAE;IACrGS,MAAM,EAAE,MAAM;IACdP;EACF,CAAC,CAAC;EAEF,OAAOK,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeG,WAAWA,CAACC,WAAW,EAAE;EACtC,OAAO,IAAI,CAACH,OAAO,CAAE,cAAaG,WAAY,EAAC,EAAE;IAC/CF,MAAM,EAAE;EACV,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeG,cAAcA,CAACD,WAAW,EAAE;EACzC,OAAO,IAAI,CAACH,OAAO,CAAE,cAAaG,WAAY,SAAQ,EAAE;IACtDF,MAAM,EAAE;EACV,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAeI,aAAaA,CAAA,EAAG;EAC7B,OAAO,IAAI,CAACL,OAAO,CAAC,YAAY,EAAE;IAChCC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ;AAEAK,MAAM,CAACC,OAAO,GAAG;EACfC,MAAM,EAAEnB,cAAc;EACtBoB,GAAG,EAAEP,WAAW;EAChBQ,MAAM,EAAEN,cAAc;EACtBO,IAAI,EAAEN;AACR,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}