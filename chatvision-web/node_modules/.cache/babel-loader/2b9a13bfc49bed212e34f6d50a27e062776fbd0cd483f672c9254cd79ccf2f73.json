{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { ReactMarkdown } from \"react-markdown/lib/react-markdown\";\nimport Navbar from \"./navbar\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SYSTEM_MESSAGE = \"You are a virtual assistant that explains the functionality of some given code in simple words. Start with a short overview of the code, followed by a detailed explanation using bullet points, followed by a list of errors (if any).\";\nexport default function Code() {\n  _s();\n  const [history, setHistory] = useState([{\n    role: \"system\",\n    content: SYSTEM_MESSAGE\n  }]);\n  const [topic, setTopic] = useState(\"\");\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [userAns, setUserAns] = useState(\"\");\n  const sendPrompt = async () => {\n    if (!topic) {\n      alert(\"Provide a topic\");\n      return;\n    }\n    const message = `The language provided is ${topic} and the code given is ${difficulty}. Please start the interview`;\n    const updatedMessages = [...history, {\n      role: \"user\",\n      content: message\n    }];\n    setHistory(updatedMessages);\n    const openai = new OpenAIApi(configuration);\n    try {\n      const completion = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: updatedMessages\n      });\n      const botMessage = completion.data.choices[0].message;\n      const updatedMessages2 = [...updatedMessages, botMessage];\n      setHistory(updatedMessages2);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Code, \"nQA5/eoYYjHzKDLb//+cQq9c3JU=\");\n_c = Code;\nvar _c;\n$RefreshReg$(_c, \"Code\");","map":{"version":3,"names":["useState","ReactMarkdown","Navbar","Fragment","_Fragment","jsxDEV","_jsxDEV","SYSTEM_MESSAGE","Code","_s","history","setHistory","role","content","topic","setTopic","difficulty","setDifficulty","userAns","setUserAns","sendPrompt","alert","message","updatedMessages","openai","OpenAIApi","configuration","completion","createChatCompletion","model","messages","botMessage","data","choices","updatedMessages2","error","console","log","_c","$RefreshReg$"],"sources":["C:/Users/priya/Desktop/React-chatvision/chatvision-web/src/code_explainer.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { ReactMarkdown } from \"react-markdown/lib/react-markdown\";\r\nimport Navbar from \"./navbar\";\r\n\r\nconst SYSTEM_MESSAGE = \"You are a virtual assistant that explains the functionality of some given code in simple words. Start with a short overview of the code, followed by a detailed explanation using bullet points, followed by a list of errors (if any).\"\r\nexport default function Code() {\r\n    const [history,setHistory] = useState([{role:\"system\",content:SYSTEM_MESSAGE}]);\r\n    const [topic,setTopic] = useState(\"\");\r\n    const [difficulty,setDifficulty] = useState(\"\");\r\n    const [userAns,setUserAns] = useState(\"\");\r\n\r\n    const sendPrompt = async () =>{\r\n        if(!topic){\r\n            alert(\"Provide a topic\");\r\n            return;\r\n        }\r\n        const message = `The language provided is ${topic} and the code given is ${difficulty}. Please start the interview`\r\n\r\n        const updatedMessages = [\r\n          ...history,\r\n          {\r\n            role: \"user\",\r\n            content: message,\r\n          },\r\n        ];\r\n        setHistory(updatedMessages)\r\n        const openai = new OpenAIApi(configuration);\r\n        try{\r\n            const completion = await openai.createChatCompletion({\r\n              model: \"gpt-3.5-turbo\",\r\n              messages: updatedMessages,\r\n            });\r\n            const botMessage = completion.data.choices[0].message;\r\n            const updatedMessages2 = [\r\n              ...updatedMessages,\r\n              botMessage\r\n            ];\r\n            setHistory(updatedMessages2);\r\n        }\r\n        catch(error){\r\n          console.log(error);\r\n        }\r\n    }\r\n    return <>\r\n    </>\r\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,mCAAmC;AACjE,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAG,yOAAyO;AAChQ,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,OAAO,EAACC,UAAU,CAAC,GAAGX,QAAQ,CAAC,CAAC;IAACY,IAAI,EAAC,QAAQ;IAACC,OAAO,EAACN;EAAc,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACO,KAAK,EAACC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACgB,UAAU,EAACC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACkB,OAAO,EAACC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEzC,MAAMoB,UAAU,GAAG,MAAAA,CAAA,KAAW;IAC1B,IAAG,CAACN,KAAK,EAAC;MACNO,KAAK,CAAC,iBAAiB,CAAC;MACxB;IACJ;IACA,MAAMC,OAAO,GAAI,4BAA2BR,KAAM,0BAAyBE,UAAW,8BAA6B;IAEnH,MAAMO,eAAe,GAAG,CACtB,GAAGb,OAAO,EACV;MACEE,IAAI,EAAE,MAAM;MACZC,OAAO,EAAES;IACX,CAAC,CACF;IACDX,UAAU,CAACY,eAAe,CAAC;IAC3B,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAACC,aAAa,CAAC;IAC3C,IAAG;MACC,MAAMC,UAAU,GAAG,MAAMH,MAAM,CAACI,oBAAoB,CAAC;QACnDC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAEP;MACZ,CAAC,CAAC;MACF,MAAMQ,UAAU,GAAGJ,UAAU,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACX,OAAO;MACrD,MAAMY,gBAAgB,GAAG,CACvB,GAAGX,eAAe,EAClBQ,UAAU,CACX;MACDpB,UAAU,CAACuB,gBAAgB,CAAC;IAChC,CAAC,CACD,OAAMC,KAAK,EAAC;MACVC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACJ,CAAC;EACD,oBAAO7B,OAAA,CAAAF,SAAA,mBACL,CAAC;AACP;AAACK,EAAA,CAxCuBD,IAAI;AAAA8B,EAAA,GAAJ9B,IAAI;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}