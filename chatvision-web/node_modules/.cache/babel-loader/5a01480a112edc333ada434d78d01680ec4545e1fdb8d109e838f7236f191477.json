{"ast":null,"code":"/**\n * Get information about a model\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @returns {Promise<object>} Resolves with the model data\n */\nasync function getModel(model_owner, model_name) {\n  return this.request(`/models/${model_owner}/${model_name}`, {\n    method: 'GET'\n  });\n}\n\n/**\n * List model versions\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @returns {Promise<object>} Resolves with the list of model versions\n */\nasync function listModelVersions(model_owner, model_name) {\n  return this.request(`/models/${model_owner}/${model_name}/versions`, {\n    method: 'GET'\n  });\n}\n\n/**\n * Get a specific model version\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @param {string} version_id - Required. The model version\n * @returns {Promise<object>} Resolves with the model version data\n */\nasync function getModelVersion(model_owner, model_name, version_id) {\n  return this.request(`/models/${model_owner}/${model_name}/versions/${version_id}`, {\n    method: 'GET'\n  });\n}\nmodule.exports = {\n  get: getModel,\n  versions: {\n    list: listModelVersions,\n    get: getModelVersion\n  }\n};","map":{"version":3,"names":["getModel","model_owner","model_name","request","method","listModelVersions","getModelVersion","version_id","module","exports","get","versions","list"],"sources":["C:/Users/priya/Desktop/try/chatvision-web/node_modules/replicate/lib/models.js"],"sourcesContent":["/**\n * Get information about a model\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @returns {Promise<object>} Resolves with the model data\n */\nasync function getModel(model_owner, model_name) {\n  return this.request(`/models/${model_owner}/${model_name}`, {\n    method: 'GET',\n  });\n}\n\n/**\n * List model versions\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @returns {Promise<object>} Resolves with the list of model versions\n */\nasync function listModelVersions(model_owner, model_name) {\n  return this.request(`/models/${model_owner}/${model_name}/versions`, {\n    method: 'GET',\n  });\n}\n\n/**\n * Get a specific model version\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @param {string} version_id - Required. The model version\n * @returns {Promise<object>} Resolves with the model version data\n */\nasync function getModelVersion(model_owner, model_name, version_id) {\n  return this.request(\n    `/models/${model_owner}/${model_name}/versions/${version_id}`,\n    {\n      method: 'GET',\n    }\n  );\n}\n\nmodule.exports = {\n  get: getModel,\n  versions: { list: listModelVersions, get: getModelVersion },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,QAAQA,CAACC,WAAW,EAAEC,UAAU,EAAE;EAC/C,OAAO,IAAI,CAACC,OAAO,CAAE,WAAUF,WAAY,IAAGC,UAAW,EAAC,EAAE;IAC1DE,MAAM,EAAE;EACV,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,iBAAiBA,CAACJ,WAAW,EAAEC,UAAU,EAAE;EACxD,OAAO,IAAI,CAACC,OAAO,CAAE,WAAUF,WAAY,IAAGC,UAAW,WAAU,EAAE;IACnEE,MAAM,EAAE;EACV,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeE,eAAeA,CAACL,WAAW,EAAEC,UAAU,EAAEK,UAAU,EAAE;EAClE,OAAO,IAAI,CAACJ,OAAO,CAChB,WAAUF,WAAY,IAAGC,UAAW,aAAYK,UAAW,EAAC,EAC7D;IACEH,MAAM,EAAE;EACV,CACF,CAAC;AACH;AAEAI,MAAM,CAACC,OAAO,GAAG;EACfC,GAAG,EAAEV,QAAQ;EACbW,QAAQ,EAAE;IAAEC,IAAI,EAAEP,iBAAiB;IAAEK,GAAG,EAAEJ;EAAgB;AAC5D,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}